// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package art

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSliceValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_2b5929dabf455867_0 []byte
		zgensym_2b5929dabf455867_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSliceValue(zgensym_2b5929dabf455867_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSliceValue) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSliceValue) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSliceValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSliceValue) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_2b5929dabf455867_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_2b5929dabf455867_1 = zgensym_2b5929dabf455867_1[:0]
		} else {
			zgensym_2b5929dabf455867_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSliceValue(zgensym_2b5929dabf455867_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSliceValue) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SearchModifier) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_2b5929dabf455867_2 int
		zgensym_2b5929dabf455867_2, err = dc.ReadInt()
		(*z) = SearchModifier(zgensym_2b5929dabf455867_2)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z SearchModifier) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SearchModifier) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SearchModifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SearchModifier) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_2b5929dabf455867_3 int
		zgensym_2b5929dabf455867_3, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = SearchModifier(zgensym_2b5929dabf455867_3)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SearchModifier) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Tree) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields5zgensym_2b5929dabf455867_6 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields5zgensym_2b5929dabf455867_6 uint32
	totalEncodedFields5zgensym_2b5929dabf455867_6, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft5zgensym_2b5929dabf455867_6 := totalEncodedFields5zgensym_2b5929dabf455867_6
	missingFieldsLeft5zgensym_2b5929dabf455867_6 := maxFields5zgensym_2b5929dabf455867_6 - totalEncodedFields5zgensym_2b5929dabf455867_6

	var nextMiss5zgensym_2b5929dabf455867_6 int32 = -1
	var found5zgensym_2b5929dabf455867_6 [maxFields5zgensym_2b5929dabf455867_6]bool
	var curField5zgensym_2b5929dabf455867_6 string

doneWithStruct5zgensym_2b5929dabf455867_6:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft5zgensym_2b5929dabf455867_6 > 0 || missingFieldsLeft5zgensym_2b5929dabf455867_6 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft5zgensym_2b5929dabf455867_6, missingFieldsLeft5zgensym_2b5929dabf455867_6, msgp.ShowFound(found5zgensym_2b5929dabf455867_6[:]), decodeMsgFieldOrder5zgensym_2b5929dabf455867_6)
		if encodedFieldsLeft5zgensym_2b5929dabf455867_6 > 0 {
			encodedFieldsLeft5zgensym_2b5929dabf455867_6--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField5zgensym_2b5929dabf455867_6 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss5zgensym_2b5929dabf455867_6 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss5zgensym_2b5929dabf455867_6 = 0
			}
			for nextMiss5zgensym_2b5929dabf455867_6 < maxFields5zgensym_2b5929dabf455867_6 && (found5zgensym_2b5929dabf455867_6[nextMiss5zgensym_2b5929dabf455867_6] || decodeMsgFieldSkip5zgensym_2b5929dabf455867_6[nextMiss5zgensym_2b5929dabf455867_6]) {
				nextMiss5zgensym_2b5929dabf455867_6++
			}
			if nextMiss5zgensym_2b5929dabf455867_6 == maxFields5zgensym_2b5929dabf455867_6 {
				// filled all the empty fields!
				break doneWithStruct5zgensym_2b5929dabf455867_6
			}
			missingFieldsLeft5zgensym_2b5929dabf455867_6--
			curField5zgensym_2b5929dabf455867_6 = decodeMsgFieldOrder5zgensym_2b5929dabf455867_6[nextMiss5zgensym_2b5929dabf455867_6]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField5zgensym_2b5929dabf455867_6)
		switch curField5zgensym_2b5929dabf455867_6 {
		// -- templateDecodeMsg ends here --

		case "Leafz_zid00_slc":
			found5zgensym_2b5929dabf455867_6[0] = true
			var zgensym_2b5929dabf455867_7 uint32
			zgensym_2b5929dabf455867_7, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Leafz) >= int(zgensym_2b5929dabf455867_7) {
				z.Leafz = (z.Leafz)[:zgensym_2b5929dabf455867_7]
			} else {
				z.Leafz = make([]*Leaf, zgensym_2b5929dabf455867_7)
			}
			for zgensym_2b5929dabf455867_4 := range z.Leafz {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Leafz[zgensym_2b5929dabf455867_4] != nil {
						dc.PushAlwaysNil()
						err = z.Leafz[zgensym_2b5929dabf455867_4].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Leafz[zgensym_2b5929dabf455867_4] == nil {
						z.Leafz[zgensym_2b5929dabf455867_4] = new(Leaf)
					}
					dc.DedupIndexEachPtr(z.Leafz[zgensym_2b5929dabf455867_4])

					err = z.Leafz[zgensym_2b5929dabf455867_4].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss5zgensym_2b5929dabf455867_6 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var decodeMsgFieldOrder5zgensym_2b5929dabf455867_6 = []string{"Leafz_zid00_slc", "", ""}

var decodeMsgFieldSkip5zgensym_2b5929dabf455867_6 = []bool{false, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Tree) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Leafz) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Tree) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_2b5929dabf455867_8 [3]bool
	fieldsInUse_zgensym_2b5929dabf455867_9 := z.fieldsNotEmpty(empty_zgensym_2b5929dabf455867_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_2b5929dabf455867_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Tree'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x72, 0x65, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_2b5929dabf455867_8[0] {
		// write "Leafz_zid00_slc"
		err = en.Append(0xaf, 0x4c, 0x65, 0x61, 0x66, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Leafz)))
		if err != nil {
			return
		}
		for zgensym_2b5929dabf455867_4 := range z.Leafz {
			// gPtr.encodeGen():

			if z.Leafz[zgensym_2b5929dabf455867_4] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Leafz[zgensym_2b5929dabf455867_4].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Tree) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Leafz_zid00_slc"
		o = append(o, 0xaf, 0x4c, 0x65, 0x61, 0x66, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Leafz)))
		for zgensym_2b5929dabf455867_4 := range z.Leafz {
			// marshalGen.gPtr()

			if z.Leafz[zgensym_2b5929dabf455867_4] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Leafz[zgensym_2b5929dabf455867_4].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Tree) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Tree) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_2b5929dabf455867_11 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_2b5929dabf455867_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_2b5929dabf455867_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_2b5929dabf455867_11 := totalEncodedFields10zgensym_2b5929dabf455867_11
	missingFieldsLeft10zgensym_2b5929dabf455867_11 := maxFields10zgensym_2b5929dabf455867_11 - totalEncodedFields10zgensym_2b5929dabf455867_11

	var nextMiss10zgensym_2b5929dabf455867_11 int32 = -1
	var found10zgensym_2b5929dabf455867_11 [maxFields10zgensym_2b5929dabf455867_11]bool
	var curField10zgensym_2b5929dabf455867_11 string

doneWithStruct10zgensym_2b5929dabf455867_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_2b5929dabf455867_11 > 0 || missingFieldsLeft10zgensym_2b5929dabf455867_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft10zgensym_2b5929dabf455867_11, missingFieldsLeft10zgensym_2b5929dabf455867_11, msgp.ShowFound(found10zgensym_2b5929dabf455867_11[:]), unmarshalMsgFieldOrder10zgensym_2b5929dabf455867_11)
		if encodedFieldsLeft10zgensym_2b5929dabf455867_11 > 0 {
			encodedFieldsLeft10zgensym_2b5929dabf455867_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_2b5929dabf455867_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_2b5929dabf455867_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_2b5929dabf455867_11 = 0
			}
			for nextMiss10zgensym_2b5929dabf455867_11 < maxFields10zgensym_2b5929dabf455867_11 && (found10zgensym_2b5929dabf455867_11[nextMiss10zgensym_2b5929dabf455867_11] || unmarshalMsgFieldSkip10zgensym_2b5929dabf455867_11[nextMiss10zgensym_2b5929dabf455867_11]) {
				nextMiss10zgensym_2b5929dabf455867_11++
			}
			if nextMiss10zgensym_2b5929dabf455867_11 == maxFields10zgensym_2b5929dabf455867_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_2b5929dabf455867_11
			}
			missingFieldsLeft10zgensym_2b5929dabf455867_11--
			curField10zgensym_2b5929dabf455867_11 = unmarshalMsgFieldOrder10zgensym_2b5929dabf455867_11[nextMiss10zgensym_2b5929dabf455867_11]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField10zgensym_2b5929dabf455867_11)
		switch curField10zgensym_2b5929dabf455867_11 {
		// -- templateUnmarshalMsg ends here --

		case "Leafz_zid00_slc":
			found10zgensym_2b5929dabf455867_11[0] = true
			if nbs.AlwaysNil {
				(z.Leafz) = (z.Leafz)[:0]
			} else {

				var zgensym_2b5929dabf455867_12 uint32
				zgensym_2b5929dabf455867_12, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Leafz) >= int(zgensym_2b5929dabf455867_12) {
					z.Leafz = (z.Leafz)[:zgensym_2b5929dabf455867_12]
				} else {
					z.Leafz = make([]*Leaf, zgensym_2b5929dabf455867_12)
				}
				for zgensym_2b5929dabf455867_4 := range z.Leafz {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Leafz[zgensym_2b5929dabf455867_4] != nil {
							z.Leafz[zgensym_2b5929dabf455867_4].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Leafz[zgensym_2b5929dabf455867_4] {
								z.Leafz[zgensym_2b5929dabf455867_4].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Leafz[zgensym_2b5929dabf455867_4] == nil {
								z.Leafz[zgensym_2b5929dabf455867_4] = new(Leaf)
							}

							bts, err = z.Leafz[zgensym_2b5929dabf455867_4].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_2b5929dabf455867_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var unmarshalMsgFieldOrder10zgensym_2b5929dabf455867_11 = []string{"Leafz_zid00_slc", "", ""}

var unmarshalMsgFieldSkip10zgensym_2b5929dabf455867_11 = []bool{false, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tree) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for zgensym_2b5929dabf455867_4 := range z.Leafz {
		if z.Leafz[zgensym_2b5929dabf455867_4] == nil {
			s += msgp.NilSize
		} else {
			s += z.Leafz[zgensym_2b5929dabf455867_4].Msgsize()
		}
	}
	return
}
