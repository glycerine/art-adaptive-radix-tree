// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package art

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_da1be0b343e58527_0 []byte
		zgensym_da1be0b343e58527_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_da1be0b343e58527_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_da1be0b343e58527_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_da1be0b343e58527_1 = zgensym_da1be0b343e58527_1[:0]
		} else {
			zgensym_da1be0b343e58527_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_da1be0b343e58527_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_da1be0b343e58527_2 []byte
		zgensym_da1be0b343e58527_2, err = dc.ReadBytes([]byte((*z)))
		(*z) = Key(zgensym_da1be0b343e58527_2)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Key) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Key) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Key) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_da1be0b343e58527_3 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_da1be0b343e58527_3 = zgensym_da1be0b343e58527_3[:0]
		} else {
			zgensym_da1be0b343e58527_3, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = Key(zgensym_da1be0b343e58527_3)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Key) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Leaf) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields4zgensym_da1be0b343e58527_5 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields4zgensym_da1be0b343e58527_5 uint32
	totalEncodedFields4zgensym_da1be0b343e58527_5, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft4zgensym_da1be0b343e58527_5 := totalEncodedFields4zgensym_da1be0b343e58527_5
	missingFieldsLeft4zgensym_da1be0b343e58527_5 := maxFields4zgensym_da1be0b343e58527_5 - totalEncodedFields4zgensym_da1be0b343e58527_5

	var nextMiss4zgensym_da1be0b343e58527_5 int32 = -1
	var found4zgensym_da1be0b343e58527_5 [maxFields4zgensym_da1be0b343e58527_5]bool
	var curField4zgensym_da1be0b343e58527_5 string

doneWithStruct4zgensym_da1be0b343e58527_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_da1be0b343e58527_5 > 0 || missingFieldsLeft4zgensym_da1be0b343e58527_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft4zgensym_da1be0b343e58527_5, missingFieldsLeft4zgensym_da1be0b343e58527_5, msgp.ShowFound(found4zgensym_da1be0b343e58527_5[:]), decodeMsgFieldOrder4zgensym_da1be0b343e58527_5)
		if encodedFieldsLeft4zgensym_da1be0b343e58527_5 > 0 {
			encodedFieldsLeft4zgensym_da1be0b343e58527_5--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField4zgensym_da1be0b343e58527_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_da1be0b343e58527_5 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss4zgensym_da1be0b343e58527_5 = 0
			}
			for nextMiss4zgensym_da1be0b343e58527_5 < maxFields4zgensym_da1be0b343e58527_5 && (found4zgensym_da1be0b343e58527_5[nextMiss4zgensym_da1be0b343e58527_5] || decodeMsgFieldSkip4zgensym_da1be0b343e58527_5[nextMiss4zgensym_da1be0b343e58527_5]) {
				nextMiss4zgensym_da1be0b343e58527_5++
			}
			if nextMiss4zgensym_da1be0b343e58527_5 == maxFields4zgensym_da1be0b343e58527_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_da1be0b343e58527_5
			}
			missingFieldsLeft4zgensym_da1be0b343e58527_5--
			curField4zgensym_da1be0b343e58527_5 = decodeMsgFieldOrder4zgensym_da1be0b343e58527_5[nextMiss4zgensym_da1be0b343e58527_5]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField4zgensym_da1be0b343e58527_5)
		switch curField4zgensym_da1be0b343e58527_5 {
		// -- templateDecodeMsg ends here --

		case "Key_zid00_rct":
			found4zgensym_da1be0b343e58527_5[0] = true
			{
				var zgensym_da1be0b343e58527_6 []byte
				zgensym_da1be0b343e58527_6, err = dc.ReadBytes([]byte(z.Key))
				z.Key = Key(zgensym_da1be0b343e58527_6)
			}
			if err != nil {
				return
			}
		case "Keybyte_zid01_byt":
			found4zgensym_da1be0b343e58527_5[1] = true
			z.Keybyte, err = dc.ReadByte()
			if err != nil {
				return
			}
		case "XTyp_zid02_int":
			found4zgensym_da1be0b343e58527_5[2] = true
			z.XTyp, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "X_zid03_bin":
			found4zgensym_da1be0b343e58527_5[3] = true
			z.X, err = dc.ReadBytes(z.X)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_da1be0b343e58527_5 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Leaf
var decodeMsgFieldOrder4zgensym_da1be0b343e58527_5 = []string{"Key_zid00_rct", "Keybyte_zid01_byt", "XTyp_zid02_int", "X_zid03_bin", ""}

var decodeMsgFieldSkip4zgensym_da1be0b343e58527_5 = []bool{false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *Leaf) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.Key) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Keybyte == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.XTyp == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.X) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Leaf) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_da1be0b343e58527_7 [5]bool
	fieldsInUse_zgensym_da1be0b343e58527_8 := z.fieldsNotEmpty(empty_zgensym_da1be0b343e58527_7[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_da1be0b343e58527_8 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Leaf'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4c, 0x65, 0x61, 0x66})
	if err != nil {
		return err
	}

	if !empty_zgensym_da1be0b343e58527_7[0] {
		// write "Key_zid00_rct"
		err = en.Append(0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteBytes([]byte(z.Key))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_da1be0b343e58527_7[1] {
		// write "Keybyte_zid01_byt"
		err = en.Append(0xb1, 0x4b, 0x65, 0x79, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x79, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteByte(z.Keybyte)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_da1be0b343e58527_7[2] {
		// write "XTyp_zid02_int"
		err = en.Append(0xae, 0x58, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.XTyp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_da1be0b343e58527_7[3] {
		// write "X_zid03_bin"
		err = en.Append(0xab, 0x58, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.X)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Leaf) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Key_zid00_rct"
		o = append(o, 0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendBytes(o, []byte(z.Key))
	}

	if !empty[1] {
		// string "Keybyte_zid01_byt"
		o = append(o, 0xb1, 0x4b, 0x65, 0x79, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x79, 0x74)
		o = msgp.AppendByte(o, z.Keybyte)
	}

	if !empty[2] {
		// string "XTyp_zid02_int"
		o = append(o, 0xae, 0x58, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.XTyp)
	}

	if !empty[3] {
		// string "X_zid03_bin"
		o = append(o, 0xab, 0x58, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.X)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Leaf) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Leaf) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields9zgensym_da1be0b343e58527_10 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields9zgensym_da1be0b343e58527_10 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields9zgensym_da1be0b343e58527_10, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft9zgensym_da1be0b343e58527_10 := totalEncodedFields9zgensym_da1be0b343e58527_10
	missingFieldsLeft9zgensym_da1be0b343e58527_10 := maxFields9zgensym_da1be0b343e58527_10 - totalEncodedFields9zgensym_da1be0b343e58527_10

	var nextMiss9zgensym_da1be0b343e58527_10 int32 = -1
	var found9zgensym_da1be0b343e58527_10 [maxFields9zgensym_da1be0b343e58527_10]bool
	var curField9zgensym_da1be0b343e58527_10 string

doneWithStruct9zgensym_da1be0b343e58527_10:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft9zgensym_da1be0b343e58527_10 > 0 || missingFieldsLeft9zgensym_da1be0b343e58527_10 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft9zgensym_da1be0b343e58527_10, missingFieldsLeft9zgensym_da1be0b343e58527_10, msgp.ShowFound(found9zgensym_da1be0b343e58527_10[:]), unmarshalMsgFieldOrder9zgensym_da1be0b343e58527_10)
		if encodedFieldsLeft9zgensym_da1be0b343e58527_10 > 0 {
			encodedFieldsLeft9zgensym_da1be0b343e58527_10--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField9zgensym_da1be0b343e58527_10 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss9zgensym_da1be0b343e58527_10 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss9zgensym_da1be0b343e58527_10 = 0
			}
			for nextMiss9zgensym_da1be0b343e58527_10 < maxFields9zgensym_da1be0b343e58527_10 && (found9zgensym_da1be0b343e58527_10[nextMiss9zgensym_da1be0b343e58527_10] || unmarshalMsgFieldSkip9zgensym_da1be0b343e58527_10[nextMiss9zgensym_da1be0b343e58527_10]) {
				nextMiss9zgensym_da1be0b343e58527_10++
			}
			if nextMiss9zgensym_da1be0b343e58527_10 == maxFields9zgensym_da1be0b343e58527_10 {
				// filled all the empty fields!
				break doneWithStruct9zgensym_da1be0b343e58527_10
			}
			missingFieldsLeft9zgensym_da1be0b343e58527_10--
			curField9zgensym_da1be0b343e58527_10 = unmarshalMsgFieldOrder9zgensym_da1be0b343e58527_10[nextMiss9zgensym_da1be0b343e58527_10]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField9zgensym_da1be0b343e58527_10)
		switch curField9zgensym_da1be0b343e58527_10 {
		// -- templateUnmarshalMsg ends here --

		case "Key_zid00_rct":
			found9zgensym_da1be0b343e58527_10[0] = true
			{
				var zgensym_da1be0b343e58527_11 []byte
				if nbs.AlwaysNil || msgp.IsNil(bts) {
					if !nbs.AlwaysNil {
						bts = bts[1:]
					}
					zgensym_da1be0b343e58527_11 = zgensym_da1be0b343e58527_11[:0]
				} else {
					zgensym_da1be0b343e58527_11, bts, err = nbs.ReadBytesBytes(bts, []byte(z.Key))

					if err != nil {
						return
					}
				}
				if err != nil {
					return
				}
				z.Key = Key(zgensym_da1be0b343e58527_11)
			}
		case "Keybyte_zid01_byt":
			found9zgensym_da1be0b343e58527_10[1] = true
			z.Keybyte, bts, err = nbs.ReadByteBytes(bts)

			if err != nil {
				return
			}
		case "XTyp_zid02_int":
			found9zgensym_da1be0b343e58527_10[2] = true
			z.XTyp, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "X_zid03_bin":
			found9zgensym_da1be0b343e58527_10[3] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.X = z.X[:0]
			} else {
				z.X, bts, err = nbs.ReadBytesBytes(bts, z.X)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss9zgensym_da1be0b343e58527_10 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Leaf
var unmarshalMsgFieldOrder9zgensym_da1be0b343e58527_10 = []string{"Key_zid00_rct", "Keybyte_zid01_byt", "XTyp_zid02_int", "X_zid03_bin", ""}

var unmarshalMsgFieldSkip9zgensym_da1be0b343e58527_10 = []bool{false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Leaf) Msgsize() (s int) {
	s = 1 + 14 + msgp.BytesPrefixSize + len([]byte(z.Key)) + 18 + msgp.ByteSize + 15 + msgp.IntSize + 12 + msgp.BytesPrefixSize + len(z.X)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TestBytes) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_da1be0b343e58527_13 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_da1be0b343e58527_13 uint32
	totalEncodedFields12zgensym_da1be0b343e58527_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_da1be0b343e58527_13 := totalEncodedFields12zgensym_da1be0b343e58527_13
	missingFieldsLeft12zgensym_da1be0b343e58527_13 := maxFields12zgensym_da1be0b343e58527_13 - totalEncodedFields12zgensym_da1be0b343e58527_13

	var nextMiss12zgensym_da1be0b343e58527_13 int32 = -1
	var found12zgensym_da1be0b343e58527_13 [maxFields12zgensym_da1be0b343e58527_13]bool
	var curField12zgensym_da1be0b343e58527_13 string

doneWithStruct12zgensym_da1be0b343e58527_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_da1be0b343e58527_13 > 0 || missingFieldsLeft12zgensym_da1be0b343e58527_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft12zgensym_da1be0b343e58527_13, missingFieldsLeft12zgensym_da1be0b343e58527_13, msgp.ShowFound(found12zgensym_da1be0b343e58527_13[:]), decodeMsgFieldOrder12zgensym_da1be0b343e58527_13)
		if encodedFieldsLeft12zgensym_da1be0b343e58527_13 > 0 {
			encodedFieldsLeft12zgensym_da1be0b343e58527_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_da1be0b343e58527_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_da1be0b343e58527_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_da1be0b343e58527_13 = 0
			}
			for nextMiss12zgensym_da1be0b343e58527_13 < maxFields12zgensym_da1be0b343e58527_13 && (found12zgensym_da1be0b343e58527_13[nextMiss12zgensym_da1be0b343e58527_13] || decodeMsgFieldSkip12zgensym_da1be0b343e58527_13[nextMiss12zgensym_da1be0b343e58527_13]) {
				nextMiss12zgensym_da1be0b343e58527_13++
			}
			if nextMiss12zgensym_da1be0b343e58527_13 == maxFields12zgensym_da1be0b343e58527_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_da1be0b343e58527_13
			}
			missingFieldsLeft12zgensym_da1be0b343e58527_13--
			curField12zgensym_da1be0b343e58527_13 = decodeMsgFieldOrder12zgensym_da1be0b343e58527_13[nextMiss12zgensym_da1be0b343e58527_13]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField12zgensym_da1be0b343e58527_13)
		switch curField12zgensym_da1be0b343e58527_13 {
		// -- templateDecodeMsg ends here --

		case "Slc_zid00_bin":
			found12zgensym_da1be0b343e58527_13[0] = true
			z.Slc, err = dc.ReadBytes(z.Slc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_da1be0b343e58527_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TestBytes
var decodeMsgFieldOrder12zgensym_da1be0b343e58527_13 = []string{"Slc_zid00_bin"}

var decodeMsgFieldSkip12zgensym_da1be0b343e58527_13 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *TestBytes) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Slc) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TestBytes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_da1be0b343e58527_14 [1]bool
	fieldsInUse_zgensym_da1be0b343e58527_15 := z.fieldsNotEmpty(empty_zgensym_da1be0b343e58527_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_da1be0b343e58527_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TestBytes'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x65, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_da1be0b343e58527_14[0] {
		// write "Slc_zid00_bin"
		err = en.Append(0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Slc)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TestBytes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Slc_zid00_bin"
		o = append(o, 0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Slc)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TestBytes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TestBytes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_da1be0b343e58527_17 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_da1be0b343e58527_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_da1be0b343e58527_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_da1be0b343e58527_17 := totalEncodedFields16zgensym_da1be0b343e58527_17
	missingFieldsLeft16zgensym_da1be0b343e58527_17 := maxFields16zgensym_da1be0b343e58527_17 - totalEncodedFields16zgensym_da1be0b343e58527_17

	var nextMiss16zgensym_da1be0b343e58527_17 int32 = -1
	var found16zgensym_da1be0b343e58527_17 [maxFields16zgensym_da1be0b343e58527_17]bool
	var curField16zgensym_da1be0b343e58527_17 string

doneWithStruct16zgensym_da1be0b343e58527_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_da1be0b343e58527_17 > 0 || missingFieldsLeft16zgensym_da1be0b343e58527_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft16zgensym_da1be0b343e58527_17, missingFieldsLeft16zgensym_da1be0b343e58527_17, msgp.ShowFound(found16zgensym_da1be0b343e58527_17[:]), unmarshalMsgFieldOrder16zgensym_da1be0b343e58527_17)
		if encodedFieldsLeft16zgensym_da1be0b343e58527_17 > 0 {
			encodedFieldsLeft16zgensym_da1be0b343e58527_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_da1be0b343e58527_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_da1be0b343e58527_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_da1be0b343e58527_17 = 0
			}
			for nextMiss16zgensym_da1be0b343e58527_17 < maxFields16zgensym_da1be0b343e58527_17 && (found16zgensym_da1be0b343e58527_17[nextMiss16zgensym_da1be0b343e58527_17] || unmarshalMsgFieldSkip16zgensym_da1be0b343e58527_17[nextMiss16zgensym_da1be0b343e58527_17]) {
				nextMiss16zgensym_da1be0b343e58527_17++
			}
			if nextMiss16zgensym_da1be0b343e58527_17 == maxFields16zgensym_da1be0b343e58527_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_da1be0b343e58527_17
			}
			missingFieldsLeft16zgensym_da1be0b343e58527_17--
			curField16zgensym_da1be0b343e58527_17 = unmarshalMsgFieldOrder16zgensym_da1be0b343e58527_17[nextMiss16zgensym_da1be0b343e58527_17]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField16zgensym_da1be0b343e58527_17)
		switch curField16zgensym_da1be0b343e58527_17 {
		// -- templateUnmarshalMsg ends here --

		case "Slc_zid00_bin":
			found16zgensym_da1be0b343e58527_17[0] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Slc = z.Slc[:0]
			} else {
				z.Slc, bts, err = nbs.ReadBytesBytes(bts, z.Slc)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_da1be0b343e58527_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TestBytes
var unmarshalMsgFieldOrder16zgensym_da1be0b343e58527_17 = []string{"Slc_zid00_bin"}

var unmarshalMsgFieldSkip16zgensym_da1be0b343e58527_17 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TestBytes) Msgsize() (s int) {
	s = 1 + 14 + msgp.BytesPrefixSize + len(z.Slc)
	return
}
